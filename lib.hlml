# Intermittent library for code that will be separated but its grouping and the
# final destination is not decided yet.

using mlog::itemCapacity;
using mlog::range;
using mlog::totalItems;

## Time to wait after giving the unit a command.
const waiting_duration = 1;

## Makes the bound unit move such that the given coordinate is in its range.
public proc approach_to(target_x, target_y) {
  while mlog::true {
    mlog::ucontrol_move(target_x, target_y);
    mlog::wait(waiting_duration);
    var within;
    mlog::ucontrol_within(target_x, target_y, mlog::unit.range, within);
    if within { break; }
  }
}

## Makes the bound unit drop all of it items to the given inventory.
##
## Assumes the inventory is within the unit's range.
public proc drop_all_to(inventory) {
  while mlog::true {
    var items = mlog::unit.totalItems;
    if items == 0 { break; }
    mlog::ucontrol_itemDrop(inventory, items);
    mlog::wait(waiting_duration);
  }
}

## Makes the bound unit take items from the given inventory.
##
## Assumes the inventory is within the unit's range.
public proc take_from(inventory, item_type) {
  while mlog::true {
    var difference = mlog::unit.itemCapacity - mlog::unit.totalItems;
    if difference <= 0 { break; }
    mlog::ucontrol_itemTake(inventory, item_type, difference);
    mlog::wait(waiting_duration);
  }
}
